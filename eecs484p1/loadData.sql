/*
---------------------------LOCATION---------------------------
*/
CREATE SEQUENCE loc_sequence
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER loc_trigger
BEFORE INSERT ON LOCATION
FOR EACH ROW
BEGIN
SELECT loc_sequence.nextval into :new.LOC_ID from dual;
END;
.
RUN;

INSERT INTO LOCATION (CITY, STATE, COUNTRY)
SELECT DISTINCT CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY
FROM PUBLIC_USER_INFORMATION
UNION
SELECT DISTINCT HOMETOWN_CITY, HOMETOWN_STATE, HOMETOWN_COUNTRY
FROM PUBLIC_USER_INFORMATION
UNION
SELECT DISTINCT EVENT_CITY, EVENT_STATE, EVENT_COUNTRY
FROM PUBLIC_EVENT_INFORMATION;

DROP SEQUENCE loc_sequence;
DROP TRIGGER  loc_trigger;

/*
---------------------------EVENT---------------------------
*/
INSERT INTO EVENT (EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE)
SELECT DISTINCT EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE
FROM PUBLIC_EVENT_INFORMATION
WHERE (EVENT_ID IS NOT NULL) AND (EVENT_CREATOR_ID IS NOT NULL);

/*
---------------------------EVT_OCCUR_LOC---------------------------
*/
INSERT INTO EVT_OCCUR_LOC (EVENT_LOCATION, EVENT_START_TIME, EVENT_END_TIME, EVENT_ID, LOC_ID)
SELECT DISTINCT E.EVENT_LOCATION, E.EVENT_START_TIME, E.EVENT_END_TIME, E.EVENT_ID, L.LOC_ID
FROM PUBLIC_EVENT_INFORMATION E, LOCATION L
WHERE E.EVENT_CITY=L.CITY AND E.EVENT_STATE=L.STATE AND E.EVENT_COUNTRY=L.COUNTRY AND (E.EVENT_ID IS NOT NULL) AND (E.EVENT_CREATOR_ID IS NOT NULL);


/*
---------------------------USERS---------------------------
*/
INSERT INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER)
SELECT DISTINCT USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER
FROM PUBLIC_USER_INFORMATION
WHERE (USER_ID IS NOT NULL) AND (FIRST_NAME IS NOT NULL) AND (LAST_NAME IS NOT NULL);

/*
---------------------------LOC_ISHOMETOWN_USR---------------------------
*/
INSERT INTO LOC_ISHOMETOWN_USR
SELECT DISTINCT U.USER_ID, L.LOC_ID
FROM PUBLIC_USER_INFORMATION U, LOCATION L 
WHERE L.COUNTRY=U.HOMETOWN_COUNTRY AND L.CITY=U.HOMETOWN_CITY AND L.STATE=U.HOMETOWN_STATE AND (USER_ID IS NOT NULL) AND (FIRST_NAME IS NOT NULL) AND (LAST_NAME IS NOT NULL);

/*
---------------------------LOC_ISCURRENT_USR---------------------------
*/
INSERT INTO LOC_ISCURRENT_USR
SELECT DISTINCT U.USER_ID, L.LOC_ID
FROM PUBLIC_USER_INFORMATION U, LOCATION L 
WHERE L.COUNTRY=U.CURRENT_COUNTRY AND L.CITY=U.CURRENT_CITY AND L.STATE=U.CURRENT_STATE AND (USER_ID IS NOT NULL) AND (FIRST_NAME IS NOT NULL) AND (LAST_NAME IS NOT NULL);

/*
---------------------------USR_ISFRIEND_USR---------------------------
*/
INSERT INTO USR_ISFRIEND_USR (USER1_ID, USER2_ID)
SELECT DISTINCT A.USER1_ID,A.USER2_ID
FROM PUBLIC_ARE_FRIENDS A
WHERE A.USER1_ID<A.USER2_ID AND (A.USER1_ID IS NOT NULL) AND (A.USER2_ID IS NOT NULL)
UNION
SELECT DISTINCT A.USER2_ID,A.USER1_ID
FROM PUBLIC_ARE_FRIENDS A
WHERE A.USER2_ID<A.USER1_ID AND (A.USER1_ID IS NOT NULL) AND (A.USER2_ID IS NOT NULL);

/*
---------------------------PHOTO---------------------------
*/
INSERT INTO PHOTO (PHOTO_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK)
SELECT DISTINCT A.PHOTO_ID, A.PHOTO_CAPTION, A.PHOTO_CREATED_TIME, A.PHOTO_MODIFIED_TIME, A.PHOTO_LINK
FROM PUBLIC_PHOTO_INFORMATION A
WHERE A.PHOTO_ID IS NOT NULL;


/*
---------------------------ALBUM---------------------------
*/
INSERT INTO ALBUM (ALBUM_ID, ALBUM_NAME, COVER_PHOTO_ID, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY)
SELECT DISTINCT ALBUM_ID, ALBUM_NAME, COVER_PHOTO_ID, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY
FROM PUBLIC_PHOTO_INFORMATION
WHERE ALBUM_ID IS NOT NULL AND COVER_PHOTO_ID IS NOT NULL AND (ALBUM_VISIBILITY='EVERYONE' OR ALBUM_VISIBILITY='FRIENDS_OF_FRIENDS' OR ALBUM_VISIBILITY='FRIENDS' OR ALBUM_VISIBILITY='MYSELF' OR ALBUM_VISIBILITY='CUSTOM');

/*
---------------------------ALB_HAS_PHO---------------------------
*/
INSERT INTO ALB_HAS_PHO (ALBUM_ID, PHOTO_ID)
SELECT DISTINCT ALBUM_ID, PHOTO_ID
FROM PUBLIC_PHOTO_INFORMATION
WHERE ALBUM_ID IS NOT NULL AND PHOTO_ID IS NOT NULL;
 
/*
---------------------------PHO_TAG_USR---------------------------
*/
INSERT INTO PHO_TAG_USR (PHOTO_ID, USER_ID, TAG_X_COORDINATE, TAG_Y_COORDINATE, TAG_CREATED_TIME)
SELECT DISTINCT T.PHOTO_ID, T.TAG_SUBJECT_ID, 
(SELECT B.TAG_X_COORDINATE FROM PUBLIC_TAG_INFORMATION B, PHO_TAG_USR O WHERE B.PHOTO_ID=O.PHOTO_ID AND B.TAG_SUBJECT_ID=O.USER_ID AND ROWNUM=1),
(SELECT C.TAG_Y_COORDINATE FROM PUBLIC_TAG_INFORMATION C, PHO_TAG_USR F WHERE C.PHOTO_ID=F.PHOTO_ID AND C.TAG_SUBJECT_ID=F.USER_ID AND ROWNUM=1),
(SELECT D.TAG_CREATED_TIME FROM PUBLIC_TAG_INFORMATION D, PHO_TAG_USR S WHERE D.PHOTO_ID=S.PHOTO_ID AND D.TAG_SUBJECT_ID=S.USER_ID AND ROWNUM=1)
FROM PUBLIC_TAG_INFORMATION T 
WHERE T.PHOTO_ID IS NOT NULL AND T.TAG_SUBJECT_ID IS NOT NULL;

/*
---------------------------PROGRAM---------------------------
*/
CREATE SEQUENCE pro_sequence
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER pro_trigger
BEFORE INSERT ON PROGRAM
FOR EACH ROW
BEGIN
SELECT pro_sequence.nextval into :new.PROGRAM_ID from dual;
END;
.
RUN;

INSERT INTO PROGRAM (INSTITUTION_NAME, CONCENTRATION, DEGREE)
SELECT DISTINCT INSTITUTION_NAME, PROGRAM_CONCENTRATION, PROGRAM_DEGREE
FROM PUBLIC_USER_INFORMATION;


DROP SEQUENCE pro_sequence;
DROP TRIGGER  pro_trigger;

/*
---------------------------USR_OWN_ALB---------------------------
*/
INSERT INTO USR_OWN_ALB (ALBUM_ID, USER_ID)
SELECT DISTINCT ALBUM_ID, OWNER_ID
FROM PUBLIC_PHOTO_INFORMATION
WHERE ALBUM_ID IS NOT NULL AND OWNER_ID IS NOT NULL;

/*
---------------------------USR_JOIN_PGM---------------------------
*/
INSERT INTO USR_JOIN_PGM (YEAR_OF_GRADUATION, USER_ID, PROGRAM_ID)
SELECT DISTINCT U.PROGRAM_YEAR, U.USER_ID, P.PROGRAM_ID
FROM PUBLIC_USER_INFORMATION U, PROGRAM P
WHERE P.INSTITUTION_NAME=U.INSTITUTION_NAME AND P.CONCENTRATION=U.PROGRAM_CONCENTRATION AND P.DEGREE=U.PROGRAM_DEGREE AND U.USER_ID IS NOT NULL;



