CREATE TABLE PUBLIC_USER_INFORMATION AS (SELECT * FROM SINGHMK.PUBLIC_USER_INFORMATION);
CREATE TABLE PUBLIC_ARE_FRIENDS AS (SELECT * FROM SINGHMK.PUBLIC_ARE_FRIENDS);
CREATE TABLE PUBLIC_PHOTO_INFORMATION AS (SELECT * FROM SINGHMK.PUBLIC_PHOTO_INFORMATION);
CREATE TABLE PUBLIC_TAG_INFORMATION AS (SELECT * FROM SINGHMK.PUBLIC_TAG_INFORMATION);
CREATE TABLE PUBLIC_EVENT_INFORMATION AS (SELECT * FROM SINGHMK.PUBLIC_EVENT_INFORMATION);

CREATE TABLE LOCATION
	(LOC_ID INTEGER,
	CITY VARCHAR2(100),
	STATE VARCHAR2(100),
	COUNTRY VARCHAR2(100),
	PRIMARY KEY (LOC_ID));

CREATE TABLE EVENT
	(EVENT_ID VARCHAR2(100) NOT NULL,
	EVENT_CREATOR_ID VARCHAR2(100) NOT NULL,
	EVENT_NAME VARCHAR2(100),
	EVENT_TAGLINE VARCHAR2(1000),
	EVENT_DESCRIPTION VARCHAR2(4000),
	EVENT_HOST VARCHAR2(100),
	EVENT_TYPE VARCHAR2(100),
	EVENT_SUBTYPE VARCHAR2(100),
	PRIMARY KEY (EVENT_ID));

CREATE TABLE EVT_OCCUR_LOC
	(EVENT_LOCATION VARCHAR2(100),
	EVENT_START_TIME TIMESTAMP(6),
	EVENT_END_TIME TIMESTAMP(6),
	EVENT_ID VARCHAR2(100) NOT NULL,
	LOC_ID INTEGER,
	PRIMARY KEY (EVENT_ID),
	FOREIGN KEY (EVENT_ID) REFERENCES EVENT,
	FOREIGN KEY (LOC_ID) REFERENCES LOCATION);

CREATE TABLE USERS
	(USER_ID VARCHAR2(100) NOT NULL,
	FIRST_NAME VARCHAR2(100) NOT NULL,
	LAST_NAME VARCHAR2(100) NOT NULL,
	YEAR_OF_BIRTH NUMBER(38),
	MONTH_OF_BIRTH NUMBER(38),
	DAY_OF_BIRTH NUMBER(38),
	GENDER VARCHAR2(100),
	PRIMARY KEY (USER_ID));

CREATE TABLE USR_JOIN_EVT
	(EVENT_ID VARCHAR2(100) NOT NULL,
	USER_ID VARCHAR2(100) NOT NULL,
	STATUS VARCHAR2(100),
	PRIMARY KEY (EVENT_ID, USER_ID),
	FOREIGN KEY (EVENT_ID) REFERENCES EVENT,
	FOREIGN KEY (USER_ID) REFERENCES USERS,
	CONSTRAINT unknownStatus
	CHECK (STATUS='attending' OR STATUS='declined' OR STATUS='unsure' OR STATUS='not-replied'));

CREATE TABLE LOC_ISHOMETOWN_USR
	(USER_ID VARCHAR2(100) NOT NULL,
	LOC_ID INTEGER,
	PRIMARY KEY (USER_ID, LOC_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS,
	FOREIGN KEY (LOC_ID) REFERENCES LOCATION);

CREATE TABLE LOC_ISCURRENT_USR
	(USER_ID VARCHAR2(100) NOT NULL,
	LOC_ID INTEGER,
	PRIMARY KEY (USER_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS,
	FOREIGN KEY (LOC_ID) REFERENCES LOCATION);

CREATE TABLE USR_ISFRIEND_USR
	(USER1_ID VARCHAR2(100) NOT NULL,
	USER2_ID VARCHAR2(100) NOT NULL,
	PRIMARY KEY (USER1_ID,USER2_ID),
	FOREIGN KEY (USER1_ID) REFERENCES USERS,
	FOREIGN KEY (USER2_ID) REFERENCES USERS);

CREATE TABLE PHOTO
	(PHOTO_ID VARCHAR2(100) NOT NULL,
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATED_TIME TIMESTAMP(6),
	PHOTO_MODIFIED_TIME TIMESTAMP(6),
	PHOTO_LINK VARCHAR2(2000),
	PRIMARY KEY (PHOTO_ID));

CREATE TABLE ALBUM
	(ALBUM_ID VARCHAR2(100) NOT NULL,
	ALBUM_NAME VARCHAR2(100),
	COVER_PHOTO_ID VARCHAR2(100) NOT NULL,
	ALBUM_CREATED_TIME TIMESTAMP(6),
	ALBUM_MODIFIED_TIME TIMESTAMP(6),
	ALBUM_LINK VARCHAR2(2000),
	ALBUM_VISIBILITY VARCHAR2(100),
	PRIMARY KEY (ALBUM_ID),
	CONSTRAINT unknownVisi
	CHECK (ALBUM_VISIBILITY='EVERYONE' OR ALBUM_VISIBILITY='FRIENDS_OF_FRIENDS' OR ALBUM_VISIBILITY='FRIENDS' OR ALBUM_VISIBILITY='MYSELF' OR ALBUM_VISIBILITY='CUSTOM'));

CREATE TABLE ALB_HAS_PHO
	(ALBUM_ID VARCHAR2(100) NOT NULL,
	PHOTO_ID VARCHAR2(100) NOT NULL,
	PRIMARY KEY (PHOTO_ID),
	FOREIGN KEY (ALBUM_ID) REFERENCES ALBUM,
	FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO);
 
CREATE TABLE PHO_TAG_USR
	(TAG_X_COORDINATE NUMBER,
	TAG_Y_COORDINATE NUMBER,
	TAG_CREATED_TIME TIMESTAMP(6),
	PHOTO_ID VARCHAR2(100) NOT NULL,
	USER_ID VARCHAR2(100) NOT NULL,
	PRIMARY KEY (PHOTO_ID, USER_ID),
	FOREIGN KEY (PHOTO_ID) REFERENCES PHOTO,
	FOREIGN KEY (USER_ID) REFERENCES USERS);

CREATE TABLE PROGRAM
	(PROGRAM_ID INTEGER,
	INSTITUTION_NAME VARCHAR2(100),
	CONCENTRATION CHAR(100),
	DEGREE VARCHAR2(100),
	PRIMARY KEY (PROGRAM_ID));
 
CREATE TABLE USR_OWN_ALB
	(ALBUM_ID VARCHAR2(100) NOT NULL,
	USER_ID VARCHAR2(100) NOT NULL,
	PRIMARY KEY (ALBUM_ID),
	FOREIGN KEY (USER_ID) REFERENCES USERS,
	FOREIGN KEY (ALBUM_ID) REFERENCES ALBUM);


CREATE TABLE USR_JOIN_PGM
	(YEAR_OF_GRADUATION VARCHAR2(100),
	USER_ID VARCHAR2(100) NOT NULL,
	PROGRAM_ID INTEGER,
	PRIMARY KEY(USER_ID, PROGRAM_ID, YEAR_OF_GRADUATION),
	FOREIGN KEY (USER_ID) REFERENCES USERS,
	FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM);









		    
		   				
